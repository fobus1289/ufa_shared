package test

import (
	"github.com/brianvoe/gofakeit/v7"
	"github.com/labstack/echo/v4"
)

type ID int64

// TODO: edit me
func Router() (server *echo.Echo) {
	// TODO: add me
	//server = cmd.Exec(true) 
	return 
}

var router = Router()
// TODO: edit me
var addr = "" // router.Server.Addr


func ServeHTTP(w http.ResponseWriter, r *http.Request) {
	router.ServeHTTP(w, r)
}

// Template generation code
{{$root := .}}

{{range $path, $methods := $root.paths}}

	{{range $method, $methodValues := $methods}}
		{{$params := $methodValues.parameters}}
		{{$responses := $methodValues.responses}}
		
		{{$hasBody := false}}
		{{$hasPath := false}}
		{{$hasQuery := false}}
		
		{{$queryMapDeclared := false}}
		{{$pathsMapDeclared := false}}
		
		{{$dto := ""}}
		
		// FIXME: {{toPascalCase $method}}{{makeFnName $path}}
		func Test_{{toPascalCase $method}}{{makeFnName $path}}(t *testing.T) {
	
		{{- range $param, $paramValue := $params}}
			{{- if $paramValue.schema}}
				{{if eq $paramValue.in "body"}} 
						{{$hasRef := false}}
						
                        {{range $paramValueK, $paramValueV := $paramValue}}
							{{if eq $paramValueK "schema"}}
								{{range $k, $v := $paramValueV}}
									{{if eq $k "$ref"}}
										{{$hasRef = true}}
									{{end}}
								{{end}}
							{{end}}
						{{end}}
						
						{{if eq $hasRef true}}
							{{$hasBody = true}}
							{{$dto = index $paramValue.schema "$ref" | extractDtoName}}
							{{$body := index $root.definitions $dto}}
							type {{$dto}} struct {
								{{- range $n, $m := $body.properties}}
									{{- range $k, $v := $m}}
										{{- if eq $k "type"}}					
											{{toPascalCase $n}} {{swaggerTypeToGoType $v}} `json:"{{$n}}"` 
										{{- end}}
									{{- end}}
								{{- end}}
							}
						{{end}}
				{{end}}
			{{end}}
			{{if eq $paramValue.in "query"}}
				{{if not $queryMapDeclared}}
					var query = make(map[string]string)
					{{$queryMapDeclared = true}}
					{{$hasQuery = true}}
				{{end}}
				{{if or (eq $paramValue.name "page") (eq $paramValue.name "perpage")}}
					query["{{$paramValue.name}}"] = "{{$paramValue.default}}"
				{{end}}
			{{end}}
			{{if eq $paramValue.in "path"}}
				{{if not $pathsMapDeclared}}
					var pathparams = make(map[string]string)
					{{$pathsMapDeclared = true}}
					{{$hasPath = true}}
				{{end}}
				pathparams["{{$paramValue.name}}"] = "1"
			{{end}}
		{{end}}
		{{range $respK, $respV := $responses}}
			t.Run("{{$method}} {{makeFnName $path}} {{$respV.description}} {{$respK}}", func(t *testing.T) {
				{{if $hasBody}}
				    // TODO: fill me
					var body = {{$dto}}{	
					{{if between $respK 200 299}}
						{{$body := index $root.definitions $dto}}
						{{- range $n, $m := $body.properties}}
							{{- range $k, $v := $m}}
								{{- if eq $k "type"}}	
									{{- if eq $v "string"}}				
										{{toPascalCase $n}}: gofakeit.Word(),
									{{- else if eq $v "integer"}}
										{{toPascalCase $n}}: gofakeit.Number(3, 100),
									{{- else if eq $v "number"}}
										{{toPascalCase $n}}: gofakeit.Float64(),
									{{- else if eq $v "boolean"}}
										{{toPascalCase $n}}: false,
									{{- else if eq $v "array"}}
										{{toPascalCase $n}}: []any{},
									{{- else}}
										{{toPascalCase $n}}: map[string]any{},
									{{- end}}
								{{- end}}
							{{- end}}
						{{- end}} 
					{{else}}
						// TODO: fill invalid data
					{{end}}
					}	
					var buf bytes.Buffer
					data, err := json.Marshal(body)
					if err != nil {
						t.Fatal(err)
					}
					buf.Write(data)
				
					{{if and $hasPath $hasQuery}}
						url := makeURL(path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}"), pathparams, query)
					{{else if $hasPath}}
						url := makeURL(path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}"), pathparams, nil)
					{{else if $hasQuery}}
						url := makeURL(path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}"), nil, query)
					{{else}}
						url := path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}")
					{{end}}
					r := httptest.NewRequest("{{$method | upper}}", url, &buf)
				{{else}}
					{{if and $hasPath $hasQuery}}
						url := makeURL(path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}"), pathparams, query)
					{{else if $hasPath}}
						url := makeURL(path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}"), pathparams, nil)
					{{else if $hasQuery}}
						url := makeURL(path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}"), nil, query)
					{{else}}
						url := path.Join(addr, "{{getAPIPath $root.basePath}}{{$path}}")
					{{end}}
					r := httptest.NewRequest("{{$method | upper}}", url, nil)
				{{end}}
				r.Header.Set("Content-Type", "application/json")
				w := httptest.NewRecorder()
				
				{
					ServeHTTP(w, r)
				}
				{{if eq $respK "200"}}
					if w.Code != http.StatusOK {
						t.Errorf("Expected status code 200, but got %d", w.Code)
					}
				{{else if eq $respK "201"}}
					if w.Code != http.StatusCreated {
						t.Errorf("Expected status code 201, but got %d", w.Code)
					}
				{{else if eq $respK "204"}}
					if w.Code != http.StatusNoContent {
						t.Errorf("Expected status code 204, but got %d", w.Code)
					}
				{{else if eq $respK "400"}}
					if w.Code != http.StatusBadRequest {
						t.Errorf("Expected status code 400, but got %d", w.Code)
					}
				{{else if eq $respK "500"}}
					if w.Code != http.StatusInternalServerError {
						t.Errorf("Expected status code 500, but got %d", w.Code)
					}
				{{else}}
					if w.Code != {{$respK}} {
						t.Errorf("Expected status code {{$respK}}, but got %d", w.Code)
					}
				{{end}}
			})
		{{end}}
	}
	{{end}}
{{end}}

func makeURL(pathURL string, pathParams map[string]string, queryParams map[string]string) string {
	// Replace path parameters in the URL
	for key, value := range pathParams {
		placeholder := "{" + key + "}"
		pathURL = strings.Replace(pathURL, placeholder, value, 1)
	}
	
	// Parse the URL
	u, _ := url.Parse(pathURL)
	
	// Add query parameters
	q := u.Query()
	for key, value := range queryParams {
		q.Add(key, value)
	}
	
	u.RawQuery = q.Encode()
	return u.String()
}
